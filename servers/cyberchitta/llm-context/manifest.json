{
  "dxt_version": "0.1",
  "name": "llm-context",
  "display_name": "LLM Context",
  "version": "1.0.0",
  "description": "Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.",
  "long_description": "",
  "author": {
    "name": "cyberchitta"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cyberchitta/llm-context.py"
  },
  "homepage": "https://github.com/cyberchitta/llm-context.py",
  "screenshots": [],
  "server": {
    "type": "python",
    "entry_point": "",
    "mcp_config": {
      "command": "uvx",
      "args": [
        "--from",
        "llm-context",
        "lc-mcp"
      ]
    }
  },
  "tools": [
    {
      "name": "lc-project-context",
      "description": "IMPORTANT: First check if project context is already available in the conversation before making any new requests. Use lc-get-files for retrieving specific files, and only use this tool when a broad repository overview is needed.\n\nGenerates a structured repository overview including: 1) Directory tree with file status (✓ full, ○ outline, ✗ excluded) 2) Complete contents of key files 3) Smart outlines highlighting important definitions in supported languages. The output is customizable via profiles that control file inclusion rules and presentation format. The assistant tracks previously retrieved project context in the conversation and checks this history before making new requests."
    },
    {
      "name": "lc-get-files",
      "description": "IMPORTANT: Check previously retrieved file contents before making new requests. Retrieves (read-only) complete contents of specified files from the project. For this project, this is the preferred method for all file content analysis and text searches - simply retrieve the relevant files and examine their contents. The assistant cannot modify files with this tool - it only reads their contents."
    },
    {
      "name": "lc-list-modified-files",
      "description": "IMPORTANT: First get the generation timestamp from the project context. Returns a list of paths to files that have been modified since a given timestamp. This is typically used to track which files have changed during the conversation. After getting the list, use lc-get-files to examine the contents of any modified files of interest."
    },
    {
      "name": "lc-code-outlines",
      "description": "Returns smart outlines highlighting important definitions in all supported code files. This provides a high-level overview of code structure without retrieving full file contents. Outlines show key definitions (classes, functions, methods) in the codebase. Use lc-get-implementations to retrieve the full implementation of any definition shown in these outlines."
    },
    {
      "name": "lc-get-implementations",
      "description": "Retrieves complete code implementations of definitions identified in code outlines. Provide a list of file paths and definition names to get their full implementations. This tool works with all supported languages except C and C++."
    }
  ],
  "prompts": [],
  "tools_generated": true,
  "keywords": [
    "ChatGPT",
    "Context Injection",
    "LLM",
    "Development",
    "Dev Tools",
    "Productivity"
  ],
  "license": "Apache 2.0",
  "user_config": {
    "mcp": {
      "type": "string",
      "description": "Indicates the model context protocol that should be used for communication.",
      "sensitive": false,
      "title": "mcp",
      "required": true
    }
  }
}