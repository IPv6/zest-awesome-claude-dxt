{
  "dxt_version": "0.1",
  "name": "thirdweb",
  "display_name": "thirdweb MCP Server",
  "version": "1.0.0",
  "description": "Read/write to over 2k blockchains, enabling data querying, contract analysis/deployment, and transaction execution, powered by Thirdweb",
  "long_description": "",
  "author": {
    "name": "thirdweb-dev"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/thirdweb-dev/ai"
  },
  "homepage": "https://thirdweb.com",
  "screenshots": [],
  "server": {
    "type": "python",
    "entry_point": "",
    "mcp_config": {
      "command": "uvx",
      "args": [
        "thirdweb-mcp"
      ],
      "env": {
        "THIRDWEB_SECRET_KEY": "${user_config.THIRDWEB_SECRET_KEY}"
      }
    }
  },
  "tools": [
    {
      "name": "chat",
      "description": "Send a message to Nebula AI and get a response. This can be used for blockchain queries, contract interactions, and access to thirdweb tools."
    },
    {
      "name": "get_session",
      "description": "Fetch complete information about a specific Nebula AI session, including conversation history, context settings, and metadata. Use this to examine past interactions or resume an existing conversation thread."
    },
    {
      "name": "list_sessions",
      "description": "Retrieve all available Nebula AI sessions for the authenticated account. Returns an array of session metadata including IDs, titles, and creation timestamps, allowing you to find and reference existing conversations."
    },
    {
      "name": "decode_signature",
      "description": "Decode a function or event signature. Use this when you need to understand what a specific function selector or event signature does and what parameters it accepts."
    },
    {
      "name": "get_address_transactions",
      "description": "Look up transactions for a wallet or contract address. Use this when asked about a specific Ethereum address (e.g., '0x1234...') to get account details including balance, transaction count, and contract verification status. This tool is specifically for addresses (accounts and contracts), NOT transaction hashes or ENS names."
    },
    {
      "name": "get_all_events",
      "description": "Retrieve blockchain events with flexible filtering options. Use this to search for specific events or to analyze event patterns across multiple blocks. Do not use this tool to simply look up a single transaction."
    },
    {
      "name": "get_all_transactions",
      "description": "Retrieve blockchain transactions with flexible filtering options. Use this to analyze transaction patterns, track specific transactions, or monitor wallet activity."
    },
    {
      "name": "get_block_details",
      "description": "Get detailed information about a specific block by its number or hash. Use this when asked about blockchain blocks (e.g., 'What's in block 12345678?' or 'Tell me about this block: 0xabc123...'). This tool is specifically for block data, NOT transactions, addresses, or contracts."
    },
    {
      "name": "get_contract_events",
      "description": "Retrieve events from a specific contract address. Use this to analyze activity or monitor events for a particular smart contract."
    },
    {
      "name": "get_contract_metadata",
      "description": "Get contract ABI and metadata about a smart contract, including name, symbol, decimals, and other contract-specific information. Use this when asked about a contract's functions, interface, or capabilities. This tool specifically retrieves details about deployed smart contracts (NOT regular wallet addresses or transaction hashes)."
    },
    {
      "name": "get_ens_transactions",
      "description": "Look up transactions associated with an ENS domain name (anything ending in .eth like 'vitalik.eth'). This tool is specifically for ENS domains, NOT addresses, transaction hashes, or contract queries."
    },
    {
      "name": "get_erc1155_tokens",
      "description": "Retrieve ERC1155 tokens (semi-fungible tokens) owned by a specified address. Shows balances of multi-token contracts with metadata."
    },
    {
      "name": "get_erc20_tokens",
      "description": "Retrieve ERC20 token balances for a specified address. Lists all fungible tokens owned with their balances, metadata, and optionally prices."
    },
    {
      "name": "get_erc721_tokens",
      "description": "Retrieve ERC721 NFTs (non-fungible tokens) owned by a specified address. Lists all unique NFTs with their metadata and optionally prices."
    },
    {
      "name": "get_nft_owners",
      "description": "Get ownership information for NFTs in a specific collection. Shows which addresses own which token IDs and in what quantities."
    },
    {
      "name": "get_nft_transfers",
      "description": "Track NFT transfers for a collection, specific token, or transaction. Useful for monitoring NFT trading activity or verifying transfers."
    },
    {
      "name": "get_nfts",
      "description": "Retrieve detailed information about NFTs from a specific collection, including metadata, attributes, and images. Optionally get data for a specific token ID."
    },
    {
      "name": "get_token_prices",
      "description": "Get current market prices for native and ERC20 tokens. Useful for valuation, tracking portfolio value, or monitoring price changes."
    },
    {
      "name": "get_transaction_details",
      "description": "Get detailed information about a specific transaction by its hash. Use this when asked to analyze, look up, check, or get details about a transaction hash (e.g., 'What can you tell me about this transaction: 0x5407ea41...'). This tool specifically deals with transaction hashes (txid/txhash), NOT addresses, contracts, or ENS names."
    },
    {
      "name": "fetch_ipfs_content",
      "description": "Fetch content from IPFS by hash. Retrieves data stored on IPFS using the thirdweb gateway."
    },
    {
      "name": "upload_to_ipfs",
      "description": "Upload a file, directory, or JSON data to IPFS. Stores any type on decentralized storage and returns an IPFS URI."
    }
  ],
  "prompts": [
    {
      "name": "Basic Usage",
      "description": "Basic usage with default settings (stdio transport with Nebula and Insight)",
      "text": "THIRDWEB_SECRET_KEY=... thirdweb-mcp"
    },
    {
      "name": "SSE Transport",
      "description": "Using SSE transport on a custom port",
      "text": "THIRDWEB_SECRET_KEY=... thirdweb-mcp --transport sse --port 8080"
    },
    {
      "name": "Full Configuration",
      "description": "Enabling all services with specific chain IDs",
      "text": "THIRDWEB_SECRET_KEY=... thirdweb-mcp --chain-id 1 --chain-id 137 \\\n    --engine-url YOUR_ENGINE_URL \\\n    --engine-auth-jwt YOUR_ENGINE_JWT \\\n    --engine-backend-wallet-address YOUR_ENGINE_BACKEND_WALLET_ADDRESS"
    }
  ],
  "tools_generated": true,
  "keywords": [
    "mcp",
    "blockchain",
    "AI Systems",
    "thirdweb",
    "web3",
    "ipfs"
  ],
  "license": "Apache-2.0",
  "user_config": {
    "THIRDWEB_SECRET_KEY": {
      "type": "string",
      "description": "Your thirdweb API secret key from dashboard",
      "sensitive": true,
      "title": "THIRDWEB_SECRET_KEY",
      "required": true
    },
    "THIRDWEB_ENGINE_URL": {
      "type": "string",
      "description": "URL endpoint for thirdweb Engine service",
      "sensitive": false,
      "title": "THIRDWEB_ENGINE_URL",
      "required": false
    },
    "THIRDWEB_ENGINE_AUTH_JWT": {
      "type": "string",
      "description": "Authentication JWT token for Engine",
      "sensitive": false,
      "title": "THIRDWEB_ENGINE_AUTH_JWT",
      "required": false
    },
    "THIRDWEB_ENGINE_BACKEND_WALLET_ADDRESS": {
      "type": "string",
      "description": "Wallet address for Engine backend",
      "sensitive": false,
      "title": "THIRDWEB_ENGINE_BACKEND_WALLET_ADDRESS",
      "required": false
    },
    "chain-id": {
      "type": "number",
      "description": "Blockchain network IDs to connect to (e.g., 1 for Ethereum mainnet, 137 for Polygon)",
      "sensitive": false,
      "title": "chain-id",
      "required": false
    }
  }
}