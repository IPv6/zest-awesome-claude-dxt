{
  "dxt_version": "0.1",
  "name": "airflow",
  "display_name": "Apache Airflow",
  "version": "1.0.0",
  "description": "A MCP Server that connects to [Apache Airflow](https://airflow.apache.org/) using official python client.",
  "long_description": "",
  "author": {
    "name": "yangkyeongmo"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yangkyeongmo/mcp-server-apache-airflow"
  },
  "homepage": "https://github.com/yangkyeongmo/mcp-server-apache-airflow",
  "screenshots": [],
  "server": {
    "type": "python",
    "entry_point": "",
    "mcp_config": {
      "command": "uvx",
      "args": [
        "mcp-server-apache-airflow"
      ],
      "env": {
        "AIRFLOW_HOST": "${user_config.AIRFLOW_HOST}",
        "AIRFLOW_USERNAME": "${user_config.AIRFLOW_USERNAME}",
        "AIRFLOW_PASSWORD": "${user_config.AIRFLOW_PASSWORD}"
      }
    }
  },
  "tools": [
    {
      "name": "get_config",
      "description": "Get current configuration"
    },
    {
      "name": "get_value",
      "description": "Get a specific option from configuration"
    },
    {
      "name": "list_connections",
      "description": "List all connections"
    },
    {
      "name": "create_connection",
      "description": "Create a connection"
    },
    {
      "name": "get_connection",
      "description": "Get a connection by ID"
    },
    {
      "name": "update_connection",
      "description": "Update a connection by ID"
    },
    {
      "name": "delete_connection",
      "description": "Delete a connection by ID"
    },
    {
      "name": "test_connection",
      "description": "Test a connection"
    },
    {
      "name": "fetch_dags",
      "description": "Fetch all DAGs"
    },
    {
      "name": "get_dag",
      "description": "Get a DAG by ID"
    },
    {
      "name": "get_dag_details",
      "description": "Get a simplified representation of DAG"
    },
    {
      "name": "get_dag_source",
      "description": "Get a source code"
    },
    {
      "name": "pause_dag",
      "description": "Pause a DAG by ID"
    },
    {
      "name": "unpause_dag",
      "description": "Unpause a DAG by ID"
    },
    {
      "name": "get_dag_tasks",
      "description": "Get tasks for DAG"
    },
    {
      "name": "get_task",
      "description": "Get a task by ID"
    },
    {
      "name": "get_tasks",
      "description": "Get tasks for DAG"
    },
    {
      "name": "patch_dag",
      "description": "Update a DAG"
    },
    {
      "name": "patch_dags",
      "description": "Update multiple DAGs"
    },
    {
      "name": "delete_dag",
      "description": "Delete a DAG"
    },
    {
      "name": "clear_task_instances",
      "description": "Clear a set of task instances"
    },
    {
      "name": "set_task_instances_state",
      "description": "Set a state of task instances"
    },
    {
      "name": "reparse_dag_file",
      "description": "Request re-parsing of a DAG file"
    },
    {
      "name": "post_dag_run",
      "description": "Trigger a DAG by ID"
    },
    {
      "name": "get_dag_runs",
      "description": "Get DAG runs by ID"
    },
    {
      "name": "get_dag_runs_batch",
      "description": "List DAG runs (batch)"
    },
    {
      "name": "get_dag_run",
      "description": "Get a DAG run by DAG ID and DAG run ID"
    },
    {
      "name": "update_dag_run_state",
      "description": "Update a DAG run state by DAG ID and DAG run ID"
    },
    {
      "name": "delete_dag_run",
      "description": "Delete a DAG run by DAG ID and DAG run ID"
    },
    {
      "name": "clear_dag_run",
      "description": "Clear a DAG run"
    },
    {
      "name": "set_dag_run_note",
      "description": "Update the DagRun note"
    },
    {
      "name": "get_upstream_dataset_events",
      "description": "Get dataset events for a DAG run"
    },
    {
      "name": "get_dag_stats",
      "description": "Get DAG stats"
    },
    {
      "name": "get_datasets",
      "description": "List datasets"
    },
    {
      "name": "get_dataset",
      "description": "Get a dataset by URI"
    },
    {
      "name": "get_dataset_events",
      "description": "Get dataset events"
    },
    {
      "name": "create_dataset_event",
      "description": "Create dataset event"
    },
    {
      "name": "get_dag_dataset_queued_event",
      "description": "Get a queued Dataset event for a DAG"
    },
    {
      "name": "get_dag_dataset_queued_events",
      "description": "Get queued Dataset events for a DAG"
    },
    {
      "name": "delete_dag_dataset_queued_event",
      "description": "Delete a queued Dataset event for a DAG"
    },
    {
      "name": "delete_dag_dataset_queued_events",
      "description": "Delete queued Dataset events for a DAG"
    },
    {
      "name": "get_dataset_queued_events",
      "description": "Get queued Dataset events for a Dataset"
    },
    {
      "name": "delete_dataset_queued_events",
      "description": "Delete queued Dataset events for a Dataset"
    },
    {
      "name": "get_event_logs",
      "description": "List log entries from event log"
    },
    {
      "name": "get_event_log",
      "description": "Get a specific log entry by ID"
    },
    {
      "name": "get_import_errors",
      "description": "List import errors"
    },
    {
      "name": "get_import_error",
      "description": "Get a specific import error by ID"
    },
    {
      "name": "get_health",
      "description": "Get instance status"
    },
    {
      "name": "get_version",
      "description": "Get version information"
    },
    {
      "name": "get_plugins",
      "description": "Get a list of loaded plugins"
    },
    {
      "name": "get_pools",
      "description": "List pools"
    },
    {
      "name": "get_pool",
      "description": "Get a pool by name"
    },
    {
      "name": "delete_pool",
      "description": "Delete a pool"
    },
    {
      "name": "post_pool",
      "description": "Create a pool"
    },
    {
      "name": "patch_pool",
      "description": "Update a pool"
    },
    {
      "name": "get_task_instance",
      "description": "Get a task instance by DAG ID, task ID, and DAG run ID"
    },
    {
      "name": "list_task_instances",
      "description": "List task instances by DAG ID and DAG run ID"
    },
    {
      "name": "update_task_instance",
      "description": "Update a task instance by DAG ID, DAG run ID, and task ID"
    },
    {
      "name": "list_variables",
      "description": "List all variables"
    },
    {
      "name": "create_variable",
      "description": "Create a variable"
    },
    {
      "name": "get_variable",
      "description": "Get a variable by key"
    },
    {
      "name": "update_variable",
      "description": "Update a variable by key"
    },
    {
      "name": "delete_variable",
      "description": "Delete a variable by key"
    },
    {
      "name": "get_xcom_entries",
      "description": "Get all XCom entries"
    },
    {
      "name": "get_xcom_entry",
      "description": "Get an XCom entry"
    }
  ],
  "prompts": [],
  "tools_generated": true,
  "keywords": [
    "Apache Airflow",
    "Data Pipeline",
    "Dev Tools",
    "Workflow",
    "DAG"
  ],
  "license": "MIT",
  "user_config": {
    "AIRFLOW_HOST": {
      "type": "string",
      "description": "URL of your Apache Airflow instance",
      "sensitive": false,
      "title": "AIRFLOW_HOST",
      "required": true
    },
    "AIRFLOW_USERNAME": {
      "type": "number",
      "description": "Username for authenticating with Airflow",
      "sensitive": false,
      "title": "AIRFLOW_USERNAME",
      "required": true
    },
    "AIRFLOW_PASSWORD": {
      "type": "string",
      "description": "Password for authenticating with Airflow",
      "sensitive": false,
      "title": "AIRFLOW_PASSWORD",
      "required": true
    }
  }
}