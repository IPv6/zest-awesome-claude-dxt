{
  "dxt_version": "0.1",
  "name": "mcp-local-rag",
  "display_name": "Local RAG",
  "version": "1.0.0",
  "description": "\"primitive\" RAG-like web search model context protocol (MCP) server that runs locally using Google's MediaPipe Text Embedder and DuckDuckGo Search. \u2728 no APIs required \u2728.",
  "long_description": "",
  "author": {
    "name": "nkapila6"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nkapila6/mcp-local-rag"
  },
  "homepage": "https://github.com/nkapila6/mcp-local-rag",
  "screenshots": [],
  "server": {
    "type": "python",
    "entry_point": "",
    "mcp_config": {
      "command": "uvx",
      "args": [
        "--python=3.10",
        "--from",
        "git+https://github.com/nkapila6/mcp-local-rag",
        "mcp-local-rag"
      ],
      "env": {}
    }
  },
  "tools": [
    {
      "name": "rag_search",
      "description": "\n    Search the web for a given query. Give back context to the LLM\n    with a RAG-like similarity sort.\n\n    Args:\n        query (str): The query to search for.\n        num_results (int): Number of results to return.\n        top_k (int): Use top \"k\" results for content.\n\n    Returns:\n        Dict of strings containing best search based on input query. Formatted in markdown.\n    ",
      "inputSchema": {
        "properties": {
          "query": {
            "title": "Query",
            "type": "string"
          },
          "num_results": {
            "default": 10,
            "title": "Num Results",
            "type": "integer"
          },
          "top_k": {
            "default": 5,
            "title": "Top K",
            "type": "integer"
          }
        },
        "required": [
          "query"
        ],
        "title": "rag_searchArguments",
        "type": "object"
      }
    }
  ],
  "prompts": [],
  "tools_generated": true,
  "keywords": [
    "RAG",
    "Search",
    "Knowledge Base"
  ],
  "license": "MIT"
}