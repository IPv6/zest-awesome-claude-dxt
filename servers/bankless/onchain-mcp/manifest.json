{
  "dxt_version": "0.1",
  "name": "onchain-mcp",
  "display_name": "Bankless Onchain MCP Server",
  "version": "1.0.0",
  "description": "MCP (Model Context Protocol) server for blockchain data interaction through the Bankless API.",
  "long_description": "",
  "author": {
    "name": "bankless"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bankless/onchain-mcp"
  },
  "homepage": "https://docs.bankless.com/bankless-api/other-services/onchain-mcp",
  "screenshots": [],
  "server": {
    "type": "node",
    "entry_point": "",
    "mcp_config": {
      "command": "npx",
      "args": [
        "@bankless/onchain-mcp"
      ],
      "env": {
        "BANKLESS_API_TOKEN": "${user_config.BANKLESS_API_TOKEN}"
      }
    }
  },
  "tools": [
    {
      "name": "read_contract",
      "description": "Read contract state from a blockchain. important:  \n                \n                In case of a tuple, don't use type tuple, but specify the inner types (found in the source) in order. For nested structs, include the substructs types.\n    \n    Example: \n    struct DataTypeA {\n    DataTypeB b;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    }\n    \n    struct DataTypeB {\n    address token;\n    }\n    \n    results in outputs for function with return type DataTypeA (tuple in abi): outputs: [{\"type\": \"address\"}, {\"type\": \"uint128\"}]"
    },
    {
      "name": "get_proxy",
      "description": "Gets the proxy address for a given network and contract"
    },
    {
      "name": "get_abi",
      "description": "Gets the ABI for a given contract on a specific network"
    },
    {
      "name": "get_source",
      "description": "Gets the source code for a given contract on a specific network"
    },
    {
      "name": "get_events",
      "description": "Fetches event logs for a given network and filter criteria"
    },
    {
      "name": "build_event_topic",
      "description": "Builds an event topic signature based on event name and arguments"
    },
    {
      "name": "get_transaction_history_for_user",
      "description": "Gets transaction history for a user and optional contract"
    },
    {
      "name": "get_transaction_info",
      "description": "Gets detailed information about a specific transaction"
    },
    {
      "name": "get_token_balances_on_network",
      "description": "Gets all token balances for a given address on a specific network"
    },
    {
      "name": "get_block_info",
      "description": "Gets detailed information about a specific block by number or hash"
    }
  ],
  "prompts": [
    {
      "name": "Read Contract State",
      "description": "Read the balance of an address from a token contract",
      "text": "What's the balance of address 0xabcd... in the token contract at 0x1234...?"
    },
    {
      "name": "Get Proxy Implementation",
      "description": "Find the implementation address for a proxy contract",
      "text": "What's the implementation contract for the proxy at 0x1234...?"
    },
    {
      "name": "Fetch Event Logs",
      "description": "Get Transfer events for a specific token contract",
      "text": "Show me the recent Transfer events for the contract at 0x1234..."
    }
  ],
  "tools_generated": true,
  "keywords": [
    "smart contracts",
    "blockchain",
    "MCP",
    "onchain",
    "ethereum",
    "Finance"
  ],
  "license": "MIT",
  "user_config": {
    "BANKLESS_API_TOKEN": {
      "type": "string",
      "description": "API token for Bankless API authentication",
      "sensitive": true,
      "title": "BANKLESS_API_TOKEN",
      "required": true
    }
  }
}